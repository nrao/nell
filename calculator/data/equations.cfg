[equations]
#  General Options
units                  =
conversion             =
sensitivity            =
time                   =

#  Hardware Information
backend                =
mode                   =
receiver               =
beams                  =
polarization           =
bandwidth              =
windows                =
switching              =

#  Source Information
declination               =
rest_freq                 =
frame                     =
doppler                   =
redshift                  =
source_velocity           =
source_diameter_slider    =
galactic                  =
right_ascension           =
estimated_continuum       =
topocentric_freq          =
effective_bw              =
duty_cycle                =

#  Data Reduction Information
r_sig_ref                 =
avg_pol                   =
diff_signal               =
no_avg_ref                =
smoothing                 =
smoothing_resolution      =
smoothing_factor          =
bw                        = 

# Constants
eta_0                     = 0.70
k                         = 1.3806503e-23
c                         = 2.99792458e10 
dish_radius               = 50.
tedb                      = 13
t_cmb                     = 2.7
t_spill                   = 3

# DB Lookups
eta_track                 = getEtaTrack(topocentric_freq, backend)
eta_dss                   = getEtaDSS(topocentric_freq)
eta_surf                  = getEtaSurf(topocentric_freq)
t_atm                     = getTatm(topocentric_freq)
t_rcvr                    = getTrcvr(topocentric_freq, backend)
tau0                      = getTau0(topocentric_freq)
k1                        = getKs(backend, bandwidth, bw, windows, receiver, beams)[0]
k2                        = getK2(backend)
t_galactic_model          = calcTsky(right_ascension, declination, topocentric_freq, galactic)

# Calculations
min_topo_freq             = getMinTopoFreq(backend, bandwidth, windows, receiver, beams) if mode.lower() == "spectral line" else ""
max_elevation             = getMaxElevation(declination)
max_el_rad                = deg2rad(max_elevation)
min_elevation             = 
min_el_rad                = deg2rad(min_elevation)
air_mass                  = 1 / math.sin(max_el_rad) if min_el_rad == max_el_rad else (deg2rad(57.29) * math.log(math.tan(max_el_rad / 2) / math.tan(min_el_rad / 2))) / (max_el_rad - min_el_rad)
source_diameter           = 0.1 * fwhm * source_diameter_slider
fwhm                      = (1.02 + 0.0135 * tedb) * 3437.7 * ( topocentric_wavelength / ( 2 * dish_radius * 100))
topocentric_wavelength    = c / (topocentric_freq * 1e6)
aperture_eff              = getAppEff(topocentric_wavelength, min_elevation, max_elevation, eta_0)
#extended_source_eff       = aperture_eff * sourceSizeCorrectionS(source_diameter, fwhm) if units == 'flux' else aperture_eff * sourceSizeCorrectionTr(source_diameter, fwhm)
extended_source_eff       = aperture_eff * sourceSizeCorrectionS(source_diameter, fwhm)
confusion_limit           = 1e3 * (0.13 * (math.pow(fwhm, 2) / math.pow(topocentric_freq, 0.7)) if units == 'flux' else (0.41 * (math.pow(dish_radius * fwhm, 2) / (2e26 * k * math.pow(topocentric_freq, 0.7))) if units == 'tr' else 0.41 * (aperture_eff * math.pow(dish_radius * fwhm, 2) / (2e26 * k * math.pow(topocentric_freq, 0.7) * attenuation))))
est0                      = (t_rcvr + t_spill + t_atm) * math.exp(tau0 * air_mass) - (t_atm - t_cmb) 
attenuation               = (est0 * math.sqrt((eta_track * eta_surf) / eta_dss) + (t_atm - t_cmb)) / (t_rcvr + t_spill + t_atm)
est_ts                    = (estimated_continuum + t_galactic_model) / math.sqrt(eta_track * eta_surf) + est0 / math.sqrt(eta_dss)
t_sys                     = (est_ts * eta_track * eta_surf) / attenuation
bw_ref                    = bw * smoothing_factor if mode == 'Spectral Line' else bw
n_ref_smth_avg            = no_avg_ref * (bw_ref / bw)
dual_pol                  = 2 if avg_pol else 1
observing_method          = 2 if 'In-Band' in switching or 'nodding' in switching.lower() else 1
n_uncorr_samp             = dual_pol * observing_method
a                         = 1e3 * k1 * est_ts * math.sqrt(k_pulsar / (k2 * 1e6 * bw * n_uncorr_samp))
b                         = math.sqrt((r_sig_ref + n_ref_smth_avg) * (r_sig_ref + 1) * k_pulsar / (r_sig_ref * n_ref_smth_avg))
c2                        = 1e26 * 2 * k / (math.pi * math.pow(dish_radius, 2))
t_tot                     = (math.pow(c2 * a * b / (extended_source_eff * sensitivity), 2) if units == 'flux' else (math.pow(a * b / (extended_source_eff * sensitivity), 2) if units == 'tr' else math.pow(a * b / (attenuation * sensitivity), 2))) if diff_signal else (math.pow(c2 * a / (extended_source_eff * sensitivity), 2) if units == 'flux' else (math.pow(a / (extended_source_eff * sensitivity), 2) if units == 'tr' else math.pow(a / (attenuation * sensitivity), 2)))
sigma                     = (a * b * c2 / extended_source_eff / math.sqrt(time) if units == 'flux' else (a * b / extended_source_eff / math.sqrt(time) if units == 'tr' else a * b / attenuation / math.sqrt(time))) if diff_signal else (a * c2 / extended_source_eff / math.sqrt(time) if units == 'flux' else ( a / extended_source_eff / math.sqrt(time) if units == 'tr' else a / attenuation / math.sqrt(time)))
tau                       = math.log(attenuation) / air_mass
t_eff_sensitivity         = time / math.pow(b, 2) if diff_signal else time
t_eff_time                = t_tot / math.pow(b, 2) if diff_signal else t_tot
t_eff                     = t_eff_time if conversion == 'Sensitivity to Time' else t_eff_sensitivity
t_sig_sensitivity         = time * r_sig_ref / (r_sig_ref + 1)
t_sig_time                = t_tot * r_sig_ref / (r_sig_ref + 1)
t_sig                     = t_sig_time if conversion == 'Sensitivity to Time' else t_sig_sensitivity
t_ref_sensitivity         = time / (r_sig_ref + 1)
t_ref_time                = t_tot / (r_sig_ref + 1)
t_ref                     = t_ref_time if conversion == 'Sensitivity to Time' else t_ref_sensitivity
visible_time              = getTimeVisible(declination, min_elevation)
k_pulsar                  = (bw / effective_bw) * (duty_cycle / (100.0 - duty_cycle)) if mode == 'Pulsar' else 1

[units]
topocentric_freq          = MHz
rest_freq                 = MHz
min_topo_freq             = kHz
bandwidth                 = MHz
bw                        = MHz
bw_ref                    = MHz
#
c                         = cm/s
resolution                = km/s
source_velocity           = km/s
#
declination               = d
max_elevation             = d
min_elevation             = d
source_diameter           = '
size                      = '
right_ascension           = d
fwhm                      = '
#
t_tot                     = s
time                      = s
t_sig                     = s
t_ref                     = s
t_eff                     = s
#
sensitivity               = Jy
redshift                  = z
topocentric_wavelength    = cm
dish_radius               = m
tedb                      = db
a                         = mK / (s^.5)
k                         = m^2 kg / (K s^2)
#
est_ts                    = K
est0                      = K
t_atm                     = K
t_cmb                     = K
t_spill                   = K
t_sys                     = K
t_rcvr                    = K
estimated_continuum       = K
t_galactic_model          = K
#
tau                       = Nepers
tau0                      = Nepers
visible_time              = hours


[labels]
#  General Options
units                  = Sensitivity Units
conversion             = Conversion
sensitivity            = User's Desired Sensitivity
time                   = User's Desired Total Observing Time

#  Hardware Information
backend                = Backend
mode                   = Mode
receiver               = Receiver
beams                  = Beams
polarization           = Polarization
bandwidth              = Backend Total Bandwidth
windows                = Number of Spectral Windows
switching              = Switching Mode
min_topo_freq          = Min. Topocentric Channel Width

#  Source Information
declination               = Source Declination
max_elevation             = Maximum Elevation
min_elevation             = Minimum Elevation
topocentric_freq          = Topocentric Frequency
rest_freq                 = Rest Frequency
frame                     = Reference Frame
doppler                   = Doppler Correction
redshift                  = Redshift
source_velocity           = Source Velocity
source_diameter           = Source Diameter
galactic                  = Model for estimating background contribution to Tsys
right_ascension           = Approximate Right Ascension
estimated_continuum       = User Estimated Contribution to Tsys

#  Data Reduction Information
r_sig_ref                 = Ratio of Signal Time vs Referencea Time
avg_pol                   = Average Orthogonal Polarization
diff_signal               = Difference Signal
no_avg_ref                = Number of Reference Observations
smoothing                 = Smoothing
smoothing_resolution      = Desired Freq. or Vel. Resolution
smoothing_factor          = Reference Smoothing Factor

# Calculations
est_ts                    = Typical Effective Tsys
attenuation               = Typical Atmospheric Attenuation
est0                      = Best Possible Effective Tsys
air_mass                  = Typical Air Mass
fwhm                      = FWHM Beamwidth
topocentric_wavelength    = Topocentric Wavelength
c                         = Speed of Light
dish_radius               = Dish Radius
tedb                      = Feed Taper
source_diameter_slider    = Source Diameter Slider Value
aperture_eff              = Aperture Efficiency
eta_0                     = Long-Wavelength Efficiency
extended_source_eff       = Extended Source Efficiency
t_atm                     = Typical Weighted Mean Temp. of Atmos.
bw_ref                    = Bandwidth of Reference Obs
confusion_limit           = Confusion Limit
t_cmb                     = Approximate CMB
t_sig                     = Time at Siginal Position or Frequency
t_ref                     = Time at Reference Position or Frequency
t_eff                     = Effective Integration Time
n_uncorr_samp             = Obs. Mode Time Mult. Factor
t_spill                   = Approximate Spillover
t_sys                     = Typical System Temperature
t_rcvr                    = Receiver's Contribution to Tsys
tau                       = Typical Atmospheric Opacity
tau0                      = Best Possible Atmos. Attenuation
bw                        = Bandwidth of Signal Obs
sigma                     = Derived Sensitivity
t_tot                     = Derived Total Observing Time
k1                        = Backend Sampling Efficiency (K1)
k2                        = Backend Channel Weighting (K2)
t_galactic_model          = Milky Way Contribution to Tsys
visible_time              = # Hrs Above Min Elevation
k_pulsar                  = Pulsar Factor (bw / eff_bw * dc / (100.0 - dc))


# first column: number of digits past decimal point
# second column: ordering weight - 1 goes first
[displays]
#  General Options - User Input

#  Hardware Information - User Input
beams                    = .0f, 100
windows                  = .0f, 100

#  Source Information - User Input

#  Data Reduction Information - User Input
smoothing_factor         = .0f, 100

# Constants
eta_0                     = .2f, 100
k                         = .6e, 100
c                         = .6e, 100
dish_radius               = .1f, 100
tedb                      = .1f, 100
t_galactic_model          = .1f, 100
t_cmb                     = .1f, 100
t_spill                   = .1f, 100

# DB Lookups
eta_track                 = .2f, 50
eta_dss                   = .2f, 50
eta_surf                  = .2f, 50
t_atm                     = .1f, 50
t_rcvr                    = .1f, 50
tau0                      = .3f, 50

#  Calculations
t_tot                     = 4.3g, 1
sigma                     = .6f, 1
t_sig                     = .1f, 1
t_ref                     = .1f, 1
t_eff                     = .1f, 1
fwhm                      = .2f, 1
aperture_eff              = .2f, 1
extended_source_eff       = .2f, 1
confusion_limit           = .2f, 1
visible_time              = .2f, 1
topocentric_freq          = .3f, 1
min_topo_freq             = .3f, 1
smoothing_resolution      = .6f, 1
air_mass                  = .1f, 1
attenuation               = .3f, 1
t_sys                     = .1f, 1
k1                        = .4f, 1
k2                        = .4f, 1
n_uncorr_samp             = .0f, 1

max_elevation             = .1f, 50
max_el_rad                = .3f, 50
min_elevation             = .1f, 50
min_el_rad                = .3f, 50
source_diameter           = .1f, 50
topocentric_wavelength    = .2f, 50
est0                      = .1f, 50
est_ts                    = .1f, 50
bw_ref                    = .6f, 50
n_ref_smth_avg            = .3f, 50
dual_pol                  = .0f, 50
observing_method          = .0f, 50
a                         = .6f, 50
b                         = .6f, 50
c2                        = .6f, 50
tau                       = .3f, 50
k_pulsar                  = .4f, 50

